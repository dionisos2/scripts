git log -stat file // what commit modify the file
git log -p file // same thing but get the full diff of the commits

Adding files quickly:
git add *file
git add -i
git add -A
magit status → s to stage and u to unstage

git ls-files --deleted | xargs git rm

git checkout commit_num file /!\ warning, this delete the current file without warning, do a commit before /!\
git checkout commit_num → go to another version, don’t do it with a unclean work directory

git commit --amend --no-edit
git rebase -i



git diff --name-only HEAD^ - (optional) use to list the files that changed in the last commit.
git reset HEAD^ path/to/file/to/revert - to reset the index to that last version, leaving the working copy untouched.
git commit --amend - to amend that last commit to include the index changes



git reset --soft HEAD^ → reset to the previous commit
git rm --cached file → remove file from stage. (unindexing)
or
git reset HEAD = git reset --mixed HEAD
git gui → a git gui to do lot of things

    git checkout . - Removes Unstaged Tracked files ONLY [Type 2] useful to remove delete files

    git clean -f - Removes Unstaged UnTracked files ONLY [Type 3]

    git reset --hard - Removes Staged Tracked and UnStaged Tracked files ONLY[Type 1, Type 2]

    git stash -u - Removes all changes [Type 1, Type 2, Type 3]


git config remote.[remoteName].push [localBranchName]:[remoteBranchName] //traquer la remote branch en push
git remote show origin //voir les informations détaillé sur toute les branches
git push origin :serverfix //supprimer la branche serverfix
git stash //enregitrer temporairement une branche (évite le commit)
git config //aide pour les variables de configurations
git branch --set-upstream developpement origin/<branch> //tracking info in branch developpement


This works. I have used it more than a few times for setting up clients with git-flow, heroku, and a backup git service.

//Récupéré un fichier adder mais pas commit, après un reset --hard
git fsck --cache --unreachable $(git for-each-ref --format="%(objectname)")
//Les fichiers sont les blobs.

.git/config for the repo:

[core]
  repositoryformatversion = 0
  filemode = true
  bare = false
  logallrefupdates = true
  ignorecase = true
[heroku]
  account = youraccount
[remote "origin"]
  url = git@bitbucket.org:youruser/yoursite.heroku.com.git # or github, etc.
  fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
  remote = origin
  merge = refs/heads/master
[branch "staging"]
  remote = origin
  merge = refs/heads/staging
[branch "develop"]
  remote = origin
  merge = refs/heads/develop
[remote "production"]
  pushurl = git@heroku.com:your-prod-app.git
  push = master:master
[remote "staging"]
  pushurl = git@heroku.com:your-staging-app.git
  push = staging:master

All working correctly:

git push origin

git pull origin

git push staging

git push production

Think about fetch and push as like stdout and stdin, where both can be redirected or closed to be one way. Also if anyone knows how to get these settings without hacking .git/config, please feel free to amend with an edit, karma points are sure to follow.
