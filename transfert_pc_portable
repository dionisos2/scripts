#!/usr/bin/env bash


if [[ $# -ne 1 ]] || { [[ "$1" != "push" ]] && [[ "$1" != "pull" ]]; }
then
	echo "The first (and only) parameter should be 'push' or 'pull'"
	exit 1
else
	command="$1"
fi

if [[ -d "/mnt/dd/transferts" ]]
then
	cd "/mnt/dd/transferts" || exit
else
	echo "'/mnt/dd/transferts' not found, are the external disk mounted ?"
	exit 1
fi

date="$(date "+%d-%m-%Y_%Hh%M")"

divers_dir="$(readlink -f ./divers)"
# divers_local_dir="/home/dionisos/téléchargements/transfer_$(date +%d-%m-%Y)/"
git_dir="$(readlink -f ./git_save)"

log_path="$(readlink -f ./log.txt)"
from_path="$(readlink -f ./from.txt)"
date_path="$(readlink -f ./date.txt)"

function remove_leading_slash () {
	# You should not pass an array named "my_local_array" to this function (see: https://unix.stackexchange.com/questions/302578/circular-name-references-in-bash-shell-function-but-not-in-ksh)
	local -n my_local_array=$1
	for index in "${!my_local_array[@]}"
	do
		my_local_array[index]=$(readlink -f "${my_local_array[$index]}")
	done
}

divers_path_to_save=("/home/dionisos/.ssh"
										 "/home/dionisos/a_trier/"
										 "/home/dionisos/logiciels/shaarli/data"
										 "/home/dionisos/personnelle/administratif"
										 "/home/dionisos/projets/programmation/julia"
										 "/home/dionisos/projets/programmation/python"
										 "/home/dionisos/projets/programmation/unity"
										 "/home/dionisos/projets/programmation/name_conventions"
										 #https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data
										 "/home/dionisos/.mozilla/firefox/cysf0lb1.dev-edition-default-1680100960076/places.sqlite"
										 "/home/dionisos/.mozilla/firefox/cysf0lb1.dev-edition-default-1680100960076/favicons.sqlite"
										)

remove_leading_slash divers_path_to_save

divers_path_to_overwrite=("/home/dionisos/a_trier/"
													"/home/dionisos/projets/programmation/julia"
													"/home/dionisos/projets/programmation/python"
													"/home/dionisos/projets/programmation/unity"
													"/home/dionisos/projets/programmation/name_conventions"
													"/home/dionisos/.mozilla/firefox/cysf0lb1.dev-edition-default-1680100960076/places.sqlite"
													"/home/dionisos/.mozilla/firefox/cysf0lb1.dev-edition-default-1680100960076/favicons.sqlite"
												 )

remove_leading_slash divers_path_to_overwrite


function contains () {
	local element="$1"
	shift # Shift element of $@ to the left
	for el in "$@"
	do
		[[ "$el" == "$element" ]] && return 0
	done
	return 1
}

function log() {
	printf "%b\n" "$1" >> "$log_path"
	printf "Log : %b\n" "$1"
}

function transfer() {
	rsync -au --progress "$@"
	# echo "rsync -au --progress $*"
	error=$?
	if [[ $error -ne 0 ]]
	then
		log "End : rsync aborted (code:$error)"
		exit 2
	fi
}

if [[ ! -d "$divers_dir" ]]
then
	mkdir -p "$divers_dir"
fi

if [[ ! -d "$git_dir" ]]
then
	mkdir -p "$git_dir"
fi

if [[ ! -f "$log_path" ]]
then
	touch "$log_path"
fi

if [[ ! -f "$from_path" ]]
then
	echo "nobody" > "$from_path"
fi

if [[ ! -f "$date_path" ]]
then
	echo "no date" > "$date_path"
fi

last_from="$(more "$from_path")"
last_date="$(more "$date_path")"

log "$date"

if [[ "$command" == "pull" ]]
then
	log "Pull transfer : from '$last_from' (at $last_date) to '$(uname -n)'"
else
	log "Push transfer : from '$(uname -n)'"
fi

if git_save
then
	log "git_save done"
else
	log "End : git_save aborted (code:$?)\n"
	exit 1
fi

if [[ "$command" == "pull" ]]
then
	for path in "${divers_path_to_save[@]}"
	do
		if contains "$path" "${divers_path_to_overwrite[@]}"
		then
			from="$divers_dir/$(basename "$path")"
			to=$(dirname "$path")
			if [[ -e "$from" ]]
			then
				log "Overwrite '$from' in directory '$to'"
				transfer "$from" "$to"
			else
				log "Skip (because not existing) : $from"
			fi
		else
			log "Skip (no overwrite) : $path"
		fi
	done
	log "Pull completed"
else
	for path in "${divers_path_to_save[@]}"
	do
		if [[ -e "$path" ]]
		then
			log "Transfer '$path' to directory '$divers_dir'"
			transfer "$path" "$divers_dir"
		else
			log "Skip (because not existing) : $path"
		fi
	done
	log "Transfer of divers completed"
	transfer --delete "/home/dionisos/personnelle/records_and_save/git_save/" "$git_dir"
	log "Transfer of git_save completed"
fi

echo "$date" > "$date_path"
uname -n > "$from_path"
log "End : everything seems ok\n"
